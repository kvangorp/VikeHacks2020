{"version":3,"sources":["Prompt.js","ResultVote.js","Game.js","App.js","index.js"],"names":["Prompt","props","state","playerName","answer","prompt","disabled","submitted","allPrompts","pubnub","gameChannel","handleSubmit","bind","handleChange","promptIndex","console","log","this","setState","text","target","value","publish","message","channel","status","id","TextField","label","variant","onChange","Button","onClick","React","Component","ResultVote","playerTurn","didVote","voting","playerCount","promptAnswers","allAnswers","voteArray","index","vote","butts","Object","values","buttItems","map","butt","color","key","clicked","indexOf","domButtons","document","getElementsByClassName","i","childNodes","forEach","child","innerHTML","style","backgroundColor","length","Game","prompting","roomId","allPlayerNames","gameOver","counter","Array","fill","voteCount","prompts","turnIndex","unsubscribeAll","subscribe","channels","newRound","getMessage","msg","updateVote","continue","className","App","nameModal","font","position","allowOutsideClick","title","input","confirmButtonText","preConfirm","str","Boolean","inRoom","lobbyChannel","response","onPressCreate","e","shortid","generate","substring","withPresence","Swal","fire","isRoomCreator","joinRoomModal","inputPlaceholder","showCancelButton","confirmButtonColor","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","joinRoom","onPressJoin","modals","push","queue","hereNow","then","totalOccupancy","maxPlayers","close","reset","catch","error","PubNubReact","publishKey","subscribeKey","openHelp","playerId","isPlaying","isDisabled","init","handleOpenHelp","handleCloseHelp","unsubscribe","newPlayernames","concat","class","Dialog","open","onClose","endGame","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6ed7ab79.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { blue } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nclass Prompt extends React.Component \r\n{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      answer: \"\",\r\n      prompt: \"\",\r\n      disabled: false,\r\n      submitted: false,\r\n    };\r\n    this.allPrompts = [\"What is the best building on campus?\", \"Which professor do you disagree with the most?\", \"What class made you cry the most?\", \"What do you do during long breaks on campus?\", \"What should you never say to a professor?\", \"What was your most embarrassing moment on campus?\", \"What class did you get the worst grade in?\", \"Who's class would you like to TA?\", \"What's your go-to parking spot?\", \"What place on campus is a rip-off?\",]\r\n    this.pubnub = this.props.pubnub\r\n    this.gameChannel = this.props.gameChannel\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.promptIndex = this.props.promptIndex;\r\n    console.log(\"prompt index\", this.promptIndex);\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    console.log(this.allPrompts[this.promptIndex])\r\n    this.setState({prompt:this.allPrompts[this.promptIndex]})\r\n  }\r\n\r\n  handleChange(text) \r\n  {\r\n    if (!text.target.value)\r\n      return\r\n    this.setState({answer: text.target.value});\r\n  }\r\n\r\n  handleSubmit()\r\n  {\r\n    this.setState({disabled: true});\r\n    this.pubnub.publish({message: {\r\n      answer: this.state.answer,\r\n      playerName: this.state.playerName,\r\n      prompt: true,\r\n    },\r\n    channel: this.gameChannel},\r\n    function(status) {\r\n      console.log(status);\r\n    });\r\n    this.state.submitted = true;\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <div id=\"divv\">\r\n        <p>{this.state.prompt}</p>\r\n        <form>\r\n        <TextField id=\"outlined-basic\" label=\"Response\" variant=\"outlined\" onChange={this.handleChange}/>\r\n        </form>\r\n        <Button variant=\"contained\" id=\"submit\" disabled={this.state.disabled}\r\n                    onClick={this.handleSubmit}\r\n                    > Submit \r\n        </Button>\r\n        { this.state.submitted &&\r\n            <p>Vote received!</p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// game will pass current player, list of players, and whos turn it is\r\n\r\nexport default Prompt;\r\n","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nclass ResultVote extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        playerTurn: this.props.playerTurn,\r\n        didVote: false,\r\n        voting: this.props.voting\r\n      };\r\n  \r\n    this.pubnub = this.props.pubnub;\r\n    this.playerCount = this.props.playerCount;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.promptAnswers = this.props.allAnswers; //[\"raining cats and dogs\",\"cloudy with a chance of meat balls\",\"always sunny in philidalphia\"];\r\n    this.voteArray = this.props.voteArray;\r\n  }\r\n\r\n  clicked(index){\r\n    this.setState({didVote: true});\r\n\r\n    this.pubnub.publish({message: {\r\n          vote: true,\r\n          index: index\r\n    }, channel: this.gameChannel\r\n    });\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    const butts = Object.values(this.promptAnswers);\r\n\r\n    const buttItems = butts.map((butt) =>\r\n    <Button variant=\"contained\" color= \"primary\"\r\n        disabled = {this.state.didVote} key={butt} onClick={this.clicked.bind(this,butts.indexOf(butt))}>\r\n      {butt}\r\n    </Button>);\r\n\r\n    if (!this.state.voting) {\r\n        let domButtons = document.getElementsByClassName('MuiButtonBase-root');\r\n        if (domButtons) {\r\n            for (let i = 0; i < domButtons.length; i++) {\r\n                // console.log(this.promptAnswers[this.state.playerTurn]);\r\n                console.log(domButtons[i].childNodes);\r\n                domButtons[i].childNodes.forEach((child) => {\r\n                    if (child.innerHTML === this.promptAnswers[this.state.playerTurn]) {\r\n                        if (domButtons[i].style) {\r\n                            domButtons[i].style.backgroundColor = \"#00e600\"\r\n                            return;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n      <h3>Vote!</h3>\r\n      {buttItems}  {this.state.didVote}\r\n    </div>);\r\n  }\r\n}export default ResultVote\r\n","import React from 'react';\r\nimport Prompt from './Prompt';\r\nimport ResultVote from './ResultVote';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      prompting: true, // controls which view\r\n      voting: false,\r\n      playerTurn: null\r\n    };\r\n\r\n    this.gameChannel = 'game--' + this.roomId;\r\n    this.allPlayerNames = this.props.allPlayerNames;\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.allAnswers = {}; // store playername: string\r\n    this.pubnub = this.props.pubnub;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.voteArray = new Array(10).fill(0);\r\n    this.voteCount = 0;\r\n    this.prompts = 0;\r\n    this.playerCount = this.allPlayerNames.length;\r\n    this.turnIndex = 0;\r\n    this.promptIndex = 0;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.pubnub.unsubscribeAll();\r\n    this.pubnub.subscribe({\r\n      channels: [this.gameChannel]\r\n      });\r\n    this.newRound();\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    this.pubnub.getMessage(this.gameChannel, (msg) => {\r\n\r\n      if(msg.message.prompt) {\r\n        this.prompts++;\r\n        this.allAnswers[msg.message.playerName] = msg.message.answer;\r\n        if (this.prompts >= this.playerCount) {\r\n          this.setState({prompting: false});\r\n          this.setState({voting: true});\r\n        }\r\n      }\r\n      else if (msg.message.vote) {\r\n        this.updateVote(msg);\r\n      }\r\n      else if (msg.message.continue) {\r\n        this.newRound();\r\n      }});\r\n  }\r\n\r\n  newRound ()  {\r\n    // iterate through all players and give them each a turn\r\n    this.setState({playerTurn: this.allPlayerNames[this.turnIndex]});\r\n    this.promptIndex++;\r\n    if (this.promptIndex > 9)\r\n      this.promptIndex-=9;\r\n    this.turnIndex++;\r\n    this.setState({prompting: true});\r\n    this.setState({voting: false});\r\n    if (this.turnIndex === this.playerCount) {\r\n      console.log(\"END GAME???\");\r\n    }\r\n  }\r\n\r\n\r\n  updateVote(msg) {\r\n    if (msg.message.vote) {\r\n      this.voteCount++;\r\n      this.voteArray[msg.message.index]++;\r\n      console.log(this.voteCount);\r\n      console.log(this.voteArray);\r\n    }\r\n    if (this.voteCount === this.playerCount) {\r\n      this.setState({voting: false});\r\n      // hardcoded continue!\r\n     // this.newRound();    \r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let status = \"STRING\";\r\n    // Change to current player's turn\r\n    status = `It's ${this.state.playerTurn}\\'s turn!`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"turn-container\">\r\n          {\r\n            this.state.prompting && <p>{status}</p>\r\n\r\n          }\r\n          {\r\n            this.state.prompting &&\r\n            <Prompt playerTurn = {this.state.playerTurn} promptIndex = {this.promptIndex} playerName={this.state.playerName} pubnub={this.pubnub} gameChannel={this.gameChannel}></Prompt>\r\n          }\r\n\r\n          { !this.state.prompting &&\r\n            <ResultVote allAnswers = {this.allAnswers} voteArray = {this.voteArray} voting = {this.state.voting} playerTurn = {this.state.playerTurn} pubnub={this.pubnub} gameChannel={this.gameChannel}></ResultVote>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./Game\";\r\nimport PubNubReact from \"pubnub-react\";\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from \"shortid\";\r\nimport \"./Game.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-aa028895-a93c-4692-88ab-38bd83c46fbf\",\r\n      subscribeKey: \"sub-c-20f9cc86-b316-11ea-875a-ceb74ea8e96a\",\r\n      openHelp: false,\r\n    });\r\n\r\n    this.state = {\r\n      playerName: \"\", // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: [],\r\n    };\r\n\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n    this.maxPlayers = 2;\r\n\r\n    this.handleOpenHelp = this.handleOpenHelp.bind(this);\r\n    this.handleCloseHelp = this.handleCloseHelp.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel],\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        if (this.state.isRoomCreator && msg.message.playerName) {\r\n          //this.state.allPlayerNames.push(msg.message.playerName);\r\n          var newPlayernames = this.state.allPlayerNames.concat(\r\n            msg.message.playerName\r\n          );\r\n          this.setState({\r\n            allPlayerNames: newPlayernames,\r\n          });\r\n        }\r\n\r\n        // Start the game once enought players have joined\r\n        if (\r\n          this.state.allPlayerNames &&\r\n          this.state.allPlayerNames.length === this.maxPlayers\r\n        ) {\r\n          // enough players\r\n\r\n          this.pubnub.publish({\r\n            message: {\r\n              allPlayerNames: this.state.allPlayerNames,\r\n              isPlaying: true,\r\n            },\r\n            channel: this.lobbyChannel,\r\n          });\r\n        }\r\n\r\n        if (msg.message.isPlaying) {\r\n          this.setState({\r\n            isPlaying: true,\r\n            allPlayerNames: msg.message.allPlayerNames,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  nameModal = {\r\n    font: \"Roboto\",\r\n    position: \"top\",\r\n    allowOutsideClick: false,\r\n    title: \"Enter your name\",\r\n    input: \"text\",\r\n    confirmButtonText: \"Enter\",\r\n    preConfirm: (str) => {\r\n      if (!Boolean(str)) return false; // check that input string has value\r\n      this.setState({ playerName: str });\r\n      this.setState({ inRoom: true });\r\n\r\n      // pubnub publish new name...\r\n      this.pubnub.publish(\r\n        {\r\n          message: {\r\n            playerName: str,\r\n          },\r\n          channel: this.lobbyChannel,\r\n        },\r\n        function (status, response) {\r\n          console.log(\"Status, Result: \", status, response);\r\n        }\r\n      );\r\n    },\r\n  };\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = \"tictactoelobby--\" + this.roomId;\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true,\r\n    });\r\n\r\n    Swal.fire(this.nameModal);\r\n    this.setState({ isRoomCreator: true });\r\n  };\r\n\r\n  joinRoomModal = {\r\n    font: \"Roboto\",\r\n    position: \"top\",\r\n    input: \"text\",\r\n    allowOutsideClick: false,\r\n    inputPlaceholder: \"Enter the room id\",\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"rgb(208,33,41)\",\r\n    confirmButtonText: \"OK\",\r\n    width: 275,\r\n    padding: \"0.7em\",\r\n    customClass: {\r\n      heightAuto: false,\r\n      popup: \"popup-class\",\r\n      confirmButton: \"join-button-class \",\r\n      cancelButton: \"join-button-class\",\r\n    },\r\n    preConfirm: (input) => {\r\n      console.log(\"INPUT: \", input);\r\n      // Check if the user typed a value in the input field\r\n      if (input) {\r\n        this.joinRoom(input);\r\n      }\r\n    },\r\n  };\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n    var modals = [];\r\n    modals.push(this.joinRoomModal);\r\n    modals.push(this.nameModal);\r\n    Swal.queue(modals);\r\n  };\r\n\r\n  reset() {\r\n    this.setState({\r\n      playerName: \"\", // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: [],\r\n    });\r\n    this.pubnub.unsubscribeAll();\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n    this.maxPlayers = 2;\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = \"tictactoelobby--\" + this.roomId;\r\n    this.setState({ inRoom: true });\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub\r\n      .hereNow({\r\n        channels: [this.lobbyChannel],\r\n      })\r\n      .then((response) => {\r\n        if (\r\n          0 < response.totalOccupancy &&\r\n          response.totalOccupancy < this.maxPlayers\r\n        ) {\r\n          this.pubnub.subscribe({\r\n            channels: [this.lobbyChannel],\r\n            withPresence: true,\r\n          });\r\n        } else {\r\n          // Game in progress or invalid code\r\n          Swal.close();\r\n          Swal.fire({\r\n            position: \"top\",\r\n            allowOutsideClick: false,\r\n            title: \"Error\",\r\n            text: \"Could not enter room\",\r\n            width: 275,\r\n            padding: \"0.7em\",\r\n            customClass: {\r\n              heightAuto: false,\r\n              title: \"title-class\",\r\n              popup: \"popup-class\",\r\n              confirmButton: \"button-class\",\r\n            },\r\n          });\r\n          this.reset();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  handleOpenHelp() {\r\n    this.setState({ openHelp: true });\r\n  }\r\n\r\n  handleCloseHelp() {\r\n    this.setState({ openHelp: false });\r\n  }\r\n\r\n  render() {\r\n    // JUST render the login screen + waiting screen\r\n    return (\r\n      <html>\r\n        <head>\r\n          <title>UVic game</title>\r\n        </head>\r\n        <body>\r\n          <div class=\"heading\">\r\n            <div className=\"Help\">\r\n              <Button\r\n                id=\"help\"\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={this.handleOpenHelp}\r\n              >\r\n                Help\r\n              </Button>\r\n              <Dialog\r\n                id=\"dialog\"\r\n                open={this.state.openHelp}\r\n                onClose={this.handleCloseHelp}\r\n              >\r\n                <h1>Rules:</h1>\r\n                <ul>\r\n                  <li>\r\n                    To start, one person is it, let's say her name is Lucy\r\n                  </li>\r\n                  <li>Everyone gets a prompt</li>\r\n                  <li>Answer the prompt as if you were Lucy</li>\r\n                  <li>\r\n                    Once everyone has answered, you'll see everyone's answers\r\n                  </li>\r\n                  <li>Click on the one you think is Lucy's</li>\r\n                  <li>You'll see which one was right</li>\r\n                  <li>Then it's the next person's turn!</li>\r\n                </ul>\r\n              </Dialog>\r\n            </div>\r\n            <h1>The UVic game!</h1>\r\n          </div>\r\n          {!this.state.inRoom && (\r\n            <div className=\"loginScreen\">\r\n              <div className=\"button-container\">\r\n                <Button\r\n                  id=\"create\"\r\n                  variant=\"contained\"\r\n                  onClick={(e) => this.onPressCreate()}\r\n                >\r\n                  {\" \"}\r\n                  Create a new game\r\n                </Button>\r\n                <Button\r\n                  id=\"join\"\r\n                  variant=\"contained\"\r\n                  onClick={(e) => this.onPressJoin()}\r\n                >\r\n                  {\" \"}\r\n                  Join a game\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.state.isPlaying && this.state.inRoom && (\r\n            <div>\r\n              <p>\r\n                Your Room Id: <span id=\"meetingID\">{this.roomId}</span>\r\n              </p>\r\n              <p>\r\n                Waiting for players... <br />\r\n                <br />\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {this.state.isPlaying && (\r\n            <Game\r\n              pubnub={this.pubnub}\r\n              gameChannel={\"game--\" + this.roomId}\r\n              playerName={this.state.playerName}\r\n              allPlayerNames={this.state.allPlayerNames}\r\n              isRoomCreator={this.state.isRoomCreator}\r\n              endGame={this.endGame}\r\n            />\r\n          )}\r\n        </body>\r\n      </html>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}