{"version":3,"sources":["Prompt.js","ResultVote.js","Game.js","App.js","index.js"],"names":["Prompt","props","state","playerName","answer","prompt","disabled","allPrompts","pubnub","gameChannel","handleSubmit","bind","handleChange","promptIndex","console","log","this","setState","text","target","value","publish","message","channel","status","TextField","id","label","variant","onChange","Button","color","onClick","React","Component","ResultVote","playerTurn","didVote","voting","playerCount","promptAnswers","allAnswers","voteArray","index","vote","butts","Object","values","buttItems","map","butt","key","clicked","indexOf","domButtons","document","getElementsByClassName","i","childNodes","forEach","child","innerHTML","style","backgroundColor","length","Game","prompting","roomId","allPlayerNames","gameOver","counter","Array","fill","voteCount","prompts","turnIndex","unsubscribeAll","subscribe","channels","newRound","getMessage","msg","updateVote","continue","className","App","nameModal","font","position","allowOutsideClick","title","input","confirmButtonText","preConfirm","str","Boolean","inRoom","lobbyChannel","response","onPressCreate","e","shortid","generate","substring","withPresence","Swal","fire","isRoomCreator","joinRoomModal","inputPlaceholder","showCancelButton","confirmButtonColor","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","joinRoom","onPressJoin","modals","push","queue","hereNow","then","totalOccupancy","maxPlayers","close","reset","catch","error","PubNubReact","publishKey","subscribeKey","playerId","isPlaying","isDisabled","init","unsubscribe","newPlayernames","concat","endGame","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e84a71f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\nclass Prompt extends React.Component \r\n{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      answer: \"\",\r\n      prompt: \"\",\r\n      disabled: false\r\n    };\r\n    this.allPrompts = [\"what is your favourite building\", \"what is your favorite class\", \"what is your favorite ice cream\", \"why are you like this\", \"how much sleep do you get\", \"AAAA\", \"BBBB\", \"CCC\", \"DDD\", \"EEE\"]\r\n    this.pubnub = this.props.pubnub\r\n    this.gameChannel = this.props.gameChannel\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.promptIndex = this.props.promptIndex;\r\n    console.log(\"prompt index\", this.promptIndex);\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    console.log(this.allPrompts[this.promptIndex])\r\n    this.setState({prompt:this.allPrompts[this.promptIndex]})\r\n  }\r\n\r\n  handleChange(text) \r\n  {\r\n    if (!text.target.value)\r\n      return\r\n    this.setState({answer: text.target.value});\r\n  }\r\n\r\n  handleSubmit()\r\n  {\r\n    this.setState({disabled: true});\r\n    this.pubnub.publish({message: {\r\n      answer: this.state.answer,\r\n      playerName: this.state.playerName,\r\n      prompt: true,\r\n    },\r\n    channel: this.gameChannel},\r\n    function(status) {\r\n      console.log(status);\r\n    });\r\n  }\r\n\r\n  render() \r\n  {\r\n    return (\r\n      <div>\r\n        <p>{this.state.prompt}</p>\r\n        <form>\r\n        <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" onChange={this.handleChange}/>\r\n        </form>\r\n        <Button variant=\"contained\" color= \"primary\" disabled={this.state.disabled}\r\n                    onClick={this.handleSubmit}\r\n                    > Submit \r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// game will pass current player, list of players, and whos turn it is\r\n\r\nexport default Prompt;\r\n","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nclass ResultVote extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        playerTurn: this.props.playerTurn,\r\n        didVote: false,\r\n        voting: this.props.voting\r\n      };\r\n  \r\n    this.pubnub = this.props.pubnub;\r\n    this.playerCount = this.props.playerCount;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.promptAnswers = this.props.allAnswers; //[\"raining cats and dogs\",\"cloudy with a chance of meat balls\",\"always sunny in philidalphia\"];\r\n    this.voteArray = this.props.voteArray;\r\n  }\r\n\r\n  clicked(index){\r\n    this.setState({didVote: true});\r\n\r\n    this.pubnub.publish({message: {\r\n          vote: true,\r\n          index: index\r\n    }, channel: this.gameChannel\r\n    });\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    const butts = Object.values(this.promptAnswers);\r\n\r\n    const buttItems = butts.map((butt) =>\r\n    <Button variant=\"contained\" color= \"primary\"\r\n        disabled = {this.state.didVote} key={butt} onClick={this.clicked.bind(this,butts.indexOf(butt))}>\r\n      {butt}\r\n    </Button>);\r\n\r\n    if (!this.state.voting) {\r\n        let domButtons = document.getElementsByClassName('MuiButtonBase-root');\r\n        if (domButtons) {\r\n            for (let i = 0; i < domButtons.length; i++) {\r\n                // console.log(this.promptAnswers[this.state.playerTurn]);\r\n                console.log(domButtons[i].childNodes);\r\n                domButtons[i].childNodes.forEach((child) => {\r\n                    if (child.innerHTML === this.promptAnswers[this.state.playerTurn]) {\r\n                        if (domButtons[i].style) {\r\n                            domButtons[i].style.backgroundColor = \"#00e600\"\r\n                            return;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n      <h3>Vote!</h3>\r\n      {buttItems}  {this.state.didVote}\r\n    </div>);\r\n  }\r\n}export default ResultVote\r\n","import React from 'react';\r\nimport Prompt from './Prompt';\r\nimport ResultVote from './ResultVote';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      prompting: true, // controls which view\r\n      voting: false,\r\n      playerTurn: null\r\n    };\r\n\r\n    this.gameChannel = 'game--' + this.roomId;\r\n    this.allPlayerNames = this.props.allPlayerNames;\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.allAnswers = {}; // store playername: string\r\n    this.pubnub = this.props.pubnub;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.voteArray = new Array(10).fill(0);\r\n    this.voteCount = 0;\r\n    this.prompts = 0;\r\n    this.playerCount = this.allPlayerNames.length;\r\n    this.turnIndex = 0;\r\n    this.promptIndex = 0;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.pubnub.unsubscribeAll();\r\n    this.pubnub.subscribe({\r\n      channels: [this.gameChannel]\r\n      });\r\n    this.newRound();\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    this.pubnub.getMessage(this.gameChannel, (msg) => {\r\n\r\n      if(msg.message.prompt) {\r\n        this.prompts++;\r\n        this.allAnswers[msg.message.playerName] = msg.message.answer;\r\n        if (this.prompts >= this.playerCount) {\r\n          this.setState({prompting: false});\r\n          this.setState({voting: true});\r\n        }\r\n      }\r\n      else if (msg.message.vote) {\r\n        this.updateVote(msg);\r\n      }\r\n      else if (msg.message.continue) {\r\n        this.newRound();\r\n      }});\r\n  }\r\n\r\n  newRound ()  {\r\n    // iterate through all players and give them each a turn\r\n    this.setState({playerTurn: this.allPlayerNames[this.turnIndex]});\r\n    this.promptIndex++;\r\n    if (this.promptIndex > 9)\r\n      this.promptIndex-=9;\r\n    this.turnIndex++;\r\n    this.setState({prompting: true});\r\n    this.setState({voting: false});\r\n    if (this.turnIndex === this.playerCount) {\r\n      console.log(\"END GAME???\");\r\n    }\r\n  }\r\n\r\n\r\n  updateVote(msg) {\r\n    if (msg.message.vote) {\r\n      this.voteCount++;\r\n      this.voteArray[msg.message.index]++;\r\n      console.log(this.voteCount);\r\n      console.log(this.voteArray);\r\n    }\r\n    if (this.voteCount === this.playerCount) {\r\n      this.setState({voting: false});\r\n      // hardcoded continue!\r\n     // this.newRound();    \r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let status = \"STRING\";\r\n    // Change to current player's turn\r\n    status = `${this.state.playerTurn}\\'s turn`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"turn-container\">\r\n          {\r\n            this.state.prompting && <p>{status}</p>\r\n\r\n          }\r\n          {\r\n            this.state.prompting &&\r\n            <Prompt playerTurn = {this.state.playerTurn} promptIndex = {this.promptIndex} playerName={this.state.playerName} pubnub={this.pubnub} gameChannel={this.gameChannel}></Prompt>\r\n          }\r\n\r\n          { !this.state.prompting &&\r\n            <ResultVote allAnswers = {this.allAnswers} voteArray = {this.voteArray} voting = {this.state.voting} playerTurn = {this.state.playerTurn} pubnub={this.pubnub} gameChannel={this.gameChannel}></ResultVote>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport Game from './Game';\r\nimport PubNubReact from 'pubnub-react';\r\nimport Swal from \"sweetalert2\";\r\nimport shortid  from 'shortid';\r\nimport './Game.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-aa028895-a93c-4692-88ab-38bd83c46fbf\",\r\n      subscribeKey: \"sub-c-20f9cc86-b316-11ea-875a-ceb74ea8e96a\"\r\n    });\r\n\r\n    this.state = {\r\n      playerName: '', // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: []\r\n    };\r\n\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n    this.maxPlayers = 2;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels : [this.lobbyChannel]\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if(this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n\r\n        if(this.state.isRoomCreator && msg.message.playerName){\r\n            //this.state.allPlayerNames.push(msg.message.playerName);\r\n            var newPlayernames = this.state.allPlayerNames.concat(msg.message.playerName);\r\n            this.setState({\r\n              allPlayerNames: newPlayernames\r\n            });\r\n          }\r\n\r\n        // Start the game once enought players have joined\r\n        if(this.state.allPlayerNames && this.state.allPlayerNames.length === this.maxPlayers){ // enough players\r\n\r\n          this.pubnub.publish({message: {\r\n            allPlayerNames: this.state.allPlayerNames,\r\n            isPlaying: true,\r\n          },\r\n          channel: this.lobbyChannel});\r\n        }\r\n\r\n        if (msg.message.isPlaying) {\r\n          this.setState({\r\n            isPlaying: true,\r\n            allPlayerNames: msg.message.allPlayerNames\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  nameModal = {\r\n    font: 'Roboto',\r\n    position: 'top',\r\n    allowOutsideClick: false,\r\n    title: 'Enter your name',\r\n    input: 'text',\r\n    confirmButtonText: 'Enter',\r\n    preConfirm: (str) => {\r\n      if (!Boolean(str))\r\n        return false;       // check that input string has value\r\n      this.setState({playerName: str})\r\n      this.setState({inRoom: true})\r\n\r\n      // pubnub publish new name...\r\n      this.pubnub.publish({\r\n        message: {\r\n          playerName: str,\r\n        },\r\n        channel: this.lobbyChannel\r\n      }, function(status,response) {\r\n        console.log(\"Status, Result: \", status, response)\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0,5);\r\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true\r\n    });\r\n\r\n    Swal.fire(this.nameModal);\r\n    this.setState({isRoomCreator: true });\r\n  }\r\n\r\n  joinRoomModal = {\r\n    font: 'Roboto',\r\n    position: 'top',\r\n    input: 'text',\r\n    allowOutsideClick: false,\r\n    inputPlaceholder: 'Enter the room id',\r\n    showCancelButton: true,\r\n    confirmButtonColor: 'rgb(208,33,41)',\r\n    confirmButtonText: 'OK',\r\n    width: 275,\r\n    padding: '0.7em',\r\n    customClass: {\r\n      heightAuto: false,\r\n      popup: 'popup-class',\r\n      confirmButton: 'join-button-class ',\r\n      cancelButton: 'join-button-class'\r\n    },\r\n    preConfirm: (input) => {\r\n      console.log(\"INPUT: \",input);\r\n      // Check if the user typed a value in the input field\r\n      if(input){\r\n        this.joinRoom(input);\r\n      }\r\n    }\r\n  };\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n    var modals = [];\r\n    modals.push(this.joinRoomModal);\r\n    modals.push(this.nameModal);\r\n    Swal.queue(modals);;\r\n  }\r\n\r\n  reset() {\r\n    this.setState({\r\n      playerName: '', // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: []\r\n    });\r\n    this.pubnub.unsubscribeAll();\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n    this.maxPlayers = 2;\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = 'tictactoelobby--' + this.roomId;\r\n    this.setState({inRoom: true});\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub.hereNow({\r\n      channels: [this.lobbyChannel],\r\n    }).then((response) => {\r\n        if(0 < response.totalOccupancy && response.totalOccupancy < this.maxPlayers){\r\n          this.pubnub.subscribe({\r\n            channels: [this.lobbyChannel],\r\n            withPresence: true\r\n          });\r\n        }\r\n        else {\r\n          // Game in progress or invalid code\r\n          Swal.close()\r\n          Swal.fire({\r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: 'Error',\r\n            text: 'Could not enter room',\r\n            width: 275,\r\n            padding: '0.7em',\r\n            customClass: {\r\n                heightAuto: false,\r\n                title: 'title-class',\r\n                popup: 'popup-class',\r\n                confirmButton: 'button-class'\r\n            }\r\n          });\r\n          this.reset();\r\n        }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n\r\n  render() {  // JUST render the login screen + waiting screen\r\n    return (\r\n        <div className=\"page\">\r\n          <div className=\"title\">\r\n            <p>VikeHacks Game</p>\r\n          </div>\r\n          <h6>vikesGame Rules:\r\n            <ol>\r\n              <li>To start, one person is it, let's say her name is Lucy</li>\r\n              <li>Everyone gets a prompt</li>\r\n              <li>Answer the prompt as if you were Lucy</li>\r\n              <li>Once everyone has answered, you'll see everyone's answers</li>\r\n              <li>Click on the one you think is Lucy's</li>\r\n              <li>You'll see which one was right</li>\r\n              <li>Then it's the next person's turn!</li>\r\n\r\n            </ol></h6>\r\n\r\n          {\r\n            !this.state.inRoom &&\r\n            <div className=\"loginScreen\">\r\n                <div className=\"button-container\">\r\n                  <Button variant=\"contained\" color= \"primary\"\r\n                    onClick={(e) => this.onPressCreate()}\r\n                    > Create\r\n                  </Button>\r\n                  <Button variant=\"contained\" color= \"primary\"\r\n                    onClick={(e) => this.onPressJoin()}\r\n                    > Join\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n          }\r\n\r\n          {\r\n            (!this.state.isPlaying && this.state.inRoom) &&\r\n            <p>Waiting for players... <br/><br/>Your Room Id: {this.roomId} </p>\r\n          }\r\n\r\n          {\r\n            this.state.isPlaying &&\r\n             <Game\r\n              pubnub={this.pubnub}\r\n              gameChannel={'game--' + this.roomId}\r\n              playerName={this.state.playerName}\r\n              allPlayerNames={this.state.allPlayerNames}\r\n              isRoomCreator={this.state.isRoomCreator}\r\n              endGame={this.endGame}\r\n            />\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}