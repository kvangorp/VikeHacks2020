{"version":3,"sources":["Prompt.js","ResultVote.js","Game.js","App.js","index.js"],"names":["Prompt","props","state","playerName","answer","prompt","disabled","submitted","allPrompts","pubnub","gameChannel","handleSubmit","bind","handleChange","promptIndex","this","setState","text","target","value","e","preventDefault","publish","message","channel","onSubmit","TextField","id","label","variant","onChange","Button","type","React","Component","ResultVote","playerTurn","didVote","voting","playerCount","promptAnswers","allAnswers","voteArray","index","vote","continue","correctAnswer","butts","Object","values","buttItems","map","butt","color","key","onClick","clicked","indexOf","domButtons","document","getElementsByClassName","i","length","childNodes","forEach","child","innerHTML","clickContinue","Game","prompting","roomId","allPlayerNames","gameOver","counter","Array","fill","voteCount","prompts","turnIndex","unsubscribeAll","subscribe","channels","newRound","getMessage","msg","updateVote","console","log","status","localeCompare","className","App","nameModal","font","position","allowOutsideClick","title","input","confirmButtonText","preConfirm","str","Boolean","inRoom","lobbyChannel","response","onPressCreate","shortid","generate","substring","withPresence","Swal","fire","isRoomCreator","joinRoomModal","inputPlaceholder","showCancelButton","confirmButtonColor","width","padding","customClass","heightAuto","popup","confirmButton","cancelButton","joinRoom","onPressJoin","modals","push","queue","onPressStart","isPlaying","hereNow","then","totalOccupancy","close","reset","catch","error","PubNubReact","publishKey","subscribeKey","playerId","isDisabled","init","unsubscribe","newPlayernames","concat","maxPlayers","html","showCloseButton","showConfirmButton","class","handleOpenRules","endGame","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.74bc6aec.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nclass Prompt extends React.Component\r\n{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      answer: \"\",\r\n      prompt: \"\",\r\n      disabled: false,\r\n      submitted: false,\r\n    };\r\n    this.allPrompts = [\r\n      \"What is the best building on campus?\",\r\n      \"Which professor do you disagree with the most?\",\r\n      \"What class made you cry the most?\",\r\n      \"What do you do during long breaks on campus?\",\r\n      \"What should you never say to a professor?\",\r\n      \"What was your most embarrassing moment on campus?\",\r\n      \"What class did you get the worst grade in?\",\r\n      \"Who's class would you like to TA?\",\r\n      \"What's your go-to parking spot?\",\r\n      \"What place on campus is a rip-off?\",\r\n      \"Which class did you skip the most\",\r\n      \"Which coffee shop has the best coffee\",\r\n      \"If you had to choose another major, what would it be?\",\r\n      \"What's your dream job?\",\r\n      \"Best bathroom on campus?\",\r\n      \"Building I get lost in\",\r\n      \"Best study spot\",\r\n      \"Most over rated study spot\",\r\n      \"The first school event I went to was...\",\r\n      \"One school event I'd like to got to is...\",\r\n      \"Most embaressing thing that's ever happened to me on campus\"\r\n\r\n    ]\r\n    this.pubnub = this.props.pubnub\r\n    this.gameChannel = this.props.gameChannel\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.promptIndex = this.props.promptIndex;\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    this.setState({prompt:this.allPrompts[this.promptIndex]})\r\n  }\r\n\r\n  handleChange(text)\r\n  {\r\n    if (!text.target.value)\r\n      return\r\n    this.setState({answer: text.target.value});\r\n  }\r\n\r\n  handleSubmit(e)\r\n  {\r\n    e.preventDefault();\r\n    this.setState({disabled: true});\r\n    this.pubnub.publish({message: {\r\n      answer: this.state.answer,\r\n      playerName: this.state.playerName,\r\n      prompt: true,\r\n    },\r\n    channel: this.gameChannel});\r\n    this.setState({submitted :true});\r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <form onSubmit = {this.handleSubmit}>\r\n        <p>{this.state.prompt}</p>\r\n        <form>\r\n        <TextField id=\"outlined-basic\" label=\"Response\" variant=\"outlined\" onChange={this.handleChange}/>\r\n        </form>\r\n        <Button type=\"submit\" variant=\"contained\" id=\"submit\" disabled={this.state.disabled}>\r\n          Submit\r\n        </Button>\r\n        { this.state.submitted &&\r\n            <p>Vote received!</p>\r\n        }\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// game will pass current player, list of players, and whos turn it is\r\n\r\nexport default Prompt;\r\n","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\n\r\nclass ResultVote extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        playerTurn: this.props.playerTurn,\r\n        didVote: !this.props.voting, // voting over = disable button\r\n        voting: this.props.voting\r\n      };\r\n  \r\n    this.pubnub = this.props.pubnub;\r\n    this.playerCount = this.props.playerCount;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.promptAnswers = this.props.allAnswers; //[\"raining cats and dogs\",\"cloudy with a chance of meat balls\",\"always sunny in philidalphia\"];\r\n    this.voteArray = this.props.voteArray;\r\n  }\r\n\r\n  clicked(index){\r\n    this.setState({didVote: true});\r\n\r\n    this.pubnub.publish({message: {\r\n          vote: true,\r\n          index: index\r\n    }, channel: this.gameChannel\r\n    });\r\n\r\n  }\r\n\r\n\r\n  clickContinue() {\r\n    this.pubnub.publish({message: {\r\n        continue: true,\r\n  }, channel: this.gameChannel\r\n  });\r\n\r\n  }\r\n\r\n  render() {\r\n    const butts = Object.values(this.promptAnswers);\r\n    const buttItems = butts.map((butt) =>\r\n    <Button variant=\"contained\" color= \"primary\"\r\n        disabled = {this.state.didVote} key={butt} onClick={this.clicked.bind(this,butts.indexOf(butt))}>\r\n      {butt}\r\n    </Button>);\r\n\r\n    let correctAnswer;\r\n\r\n    if (!this.state.voting) {\r\n        let domButtons = document.getElementsByClassName('MuiButtonBase-root');\r\n        if (domButtons) {\r\n            for (let i = 0; i < domButtons.length; i++) {\r\n                domButtons[i].childNodes.forEach((child) => {\r\n                    if (child.innerHTML === this.promptAnswers[this.state.playerTurn]) {\r\n                        correctAnswer = \"Correct answer: \"+child.innerHTML;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n      <h3>Vote!</h3>\r\n      {buttItems} \r\n      <p>{correctAnswer}</p>\r\n      { !this.state.voting && <div><br/><Button variant=\"contained\" color= \"secondary\"\r\n        onClick={this.clickContinue.bind(this)}>Continue\r\n    </Button></div>}\r\n\r\n    </div>);\r\n  }\r\n}export default ResultVote\r\n","import React from 'react';\r\nimport Prompt from './Prompt';\r\nimport ResultVote from './ResultVote';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: this.props.playerName,\r\n      prompting: true, // controls which view\r\n      voting: true,\r\n      playerTurn: null\r\n    };\r\n\r\n    this.playerName = this.props.playerName;\r\n    this.gameChannel = 'game--' + this.roomId;\r\n    this.allPlayerNames = this.props.allPlayerNames;\r\n    this.gameOver = false;\r\n    this.counter = 0;\r\n    this.allAnswers = {}; // store playername: string\r\n    this.pubnub = this.props.pubnub;\r\n    this.gameChannel = this.props.gameChannel;\r\n    this.voteArray = new Array(10).fill(0);\r\n    this.voteCount = 0;\r\n    this.prompts = 0;\r\n    this.playerCount = this.allPlayerNames.length;\r\n    this.turnIndex = 0;\r\n    this.promptIndex = 0;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.pubnub.unsubscribeAll();\r\n    this.pubnub.subscribe({\r\n      channels: [this.gameChannel]\r\n      });\r\n    this.newRound();\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    this.pubnub.getMessage(this.gameChannel, (msg) => {\r\n\r\n      if(msg.message.prompt) {\r\n        this.prompts++;\r\n        this.allAnswers[msg.message.playerName] = msg.message.answer;\r\n        if (this.prompts >= this.playerCount) {\r\n          this.setState({prompting: false});\r\n          this.setState({voting: true});\r\n        }\r\n      }\r\n      else if (msg.message.vote) {\r\n        this.updateVote(msg);\r\n      }\r\n      else if (msg.message.continue) {\r\n        this.newRound();\r\n      }});\r\n  }\r\n\r\n  newRound ()  {\r\n    // iterate through all players and give them each a turn\r\n    this.setState({playerTurn: this.allPlayerNames[this.turnIndex]});\r\n    this.promptIndex++;\r\n    this.prompts = 0;\r\n    this.voteCount = 0;\r\n    if (this.promptIndex > 9)\r\n      this.promptIndex-=9;\r\n    this.turnIndex++;\r\n    this.setState({prompting: true});\r\n    console.log(\"update voting\", this.state.voting);\r\n\r\n    if (this.turnIndex === this.playerCount) {\r\n      // console.log(\"END GAME???\");\r\n    }\r\n  }\r\n\r\n\r\n  updateVote(msg) {\r\n    if (msg.message.vote) {\r\n      this.voteCount++;\r\n      this.voteArray[msg.message.index]++;\r\n    }\r\n    if (this.voteCount  === this.playerCount -1) {\r\n      this.setState({voting: false});\r\n      // hardcoded continue!\r\n      this.newRound();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let status = this.state.playerTurn?.localeCompare(this.playerName) ? `It's ${this.state.playerTurn}'s turn!` : 'Your turn';\r\n    let waitString = 'Waiting for players to vote...';\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"nameHeader\">\r\n          {this.playerName}\r\n          </div>\r\n        <div className=\"turn-container\">\r\n          {\r\n            this.state.prompting && <p>{status}</p>\r\n          }\r\n          { // input prompts\r\n            this.state.prompting &&\r\n            <Prompt playerTurn = {this.state.playerTurn} promptIndex = {this.promptIndex} playerName={this.state.playerName} pubnub={this.pubnub} gameChannel={this.gameChannel}></Prompt>\r\n          }\r\n\r\n          { // wait for players to vote\r\n          (!this.state.prompting && this.state.voting && this.state.playerTurn === this.playerName) &&\r\n            <p>{waitString}</p>\r\n          }\r\n\r\n          { // vote for prompts\r\n           (!this.state.prompting && this.state.voting && this.state.playerTurn !== this.playerName) &&\r\n            <ResultVote allAnswers = {this.allAnswers} voteArray = {this.voteArray} voting = {this.state.voting} playerTurn = {this.state.playerTurn} pubnub={this.pubnub} gameChannel={this.gameChannel}></ResultVote>\r\n          }\r\n\r\n          { // view results\r\n            (!this.state.prompting && !this.state.voting) &&\r\n            <ResultVote allAnswers = {this.allAnswers} voteArray = {this.voteArray} voting = {this.state.voting} playerTurn = {this.state.playerTurn} pubnub={this.pubnub} gameChannel={this.gameChannel}></ResultVote>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./Game\";\r\nimport PubNubReact from \"pubnub-react\";\r\nimport Swal from \"sweetalert2\";\r\nimport shortid from \"shortid\";\r\nimport \"./Game.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.pubnub = new PubNubReact({\r\n      publishKey: \"pub-c-c9377952-9ac2-4c85-9d37-c670ea401a9b\",\r\n      subscribeKey: \"sub-c-10784c98-b316-11ea-afa6-debb908608d9\",\r\n    });\r\n\r\n    this.state = {\r\n      playerName: \"\", // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: [],\r\n    };\r\n\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pubnub.unsubscribe({\r\n      channels: [this.lobbyChannel],\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Check that the player is connected to a channel\r\n    if (this.lobbyChannel != null) {\r\n      this.pubnub.getMessage(this.lobbyChannel, (msg) => {\r\n        if (this.state.isRoomCreator && msg.message.playerName) {\r\n          //this.state.allPlayerNames.push(msg.message.playerName);\r\n          var newPlayernames = this.state.allPlayerNames.concat(\r\n            msg.message.playerName\r\n          );\r\n          this.setState({allPlayerNames: newPlayernames});\r\n        }\r\n\r\n        if (msg.message.isPlaying) {\r\n          this.setState({\r\n            isPlaying: true,\r\n            allPlayerNames: msg.message.allPlayerNames,\r\n          });\r\n        }\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  nameModal = {\r\n    font: \"Roboto\",\r\n    position: \"top\",\r\n    allowOutsideClick: false,\r\n    title: \"Enter your name\",\r\n    input: \"text\",\r\n    confirmButtonText: \"Enter\",\r\n    preConfirm: (str) => {\r\n      if (!Boolean(str)) return false; // check that input string has value\r\n      this.setState({ playerName: str });\r\n      this.setState({ inRoom: true });\r\n\r\n      // pubnub publish new name...\r\n      this.pubnub.publish(\r\n        {\r\n          message: {\r\n            playerName: str,\r\n          },\r\n          channel: this.lobbyChannel,\r\n        },\r\n        function (status, response) {\r\n          console.log(\"Status, Result: \", status, response);\r\n        }\r\n      );\r\n    },\r\n  };\r\n\r\n  // Create a room channel\r\n  onPressCreate = (e) => {\r\n    // Create a random name for the channel\r\n    this.roomId = shortid.generate().substring(0, 5);\r\n    this.lobbyChannel = \"tictactoelobby--\" + this.roomId;\r\n\r\n    this.pubnub.subscribe({\r\n      channels: [this.lobbyChannel],\r\n      withPresence: true,\r\n    });\r\n\r\n    Swal.fire(this.nameModal);\r\n    this.setState({ isRoomCreator: true });\r\n  };\r\n\r\n  joinRoomModal = {\r\n    font: \"Roboto\",\r\n    position: \"top\",\r\n    input: \"text\",\r\n    allowOutsideClick: false,\r\n    inputPlaceholder: \"Enter the room id\",\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"rgb(208,33,41)\",\r\n    confirmButtonText: \"OK\",\r\n    width: 275,\r\n    padding: \"0.7em\",\r\n    customClass: {\r\n      heightAuto: false,\r\n      popup: \"popup-class\",\r\n      confirmButton: \"join-button-class \",\r\n      cancelButton: \"join-button-class\",\r\n    },\r\n    preConfirm: (input) => {\r\n      // Check if the user typed a value in the input field\r\n      if (input) {\r\n        this.joinRoom(input);\r\n      }\r\n    },\r\n  };\r\n\r\n  // The 'Join' button was pressed\r\n  onPressJoin = (e) => {\r\n    var modals = [];\r\n    modals.push(this.joinRoomModal);\r\n    modals.push(this.nameModal);\r\n    Swal.queue(modals);\r\n  };\r\n\r\n  // The 'Start' button was pressed\r\n  onPressStart = (e) => {\r\n    this.pubnub.publish({\r\n      message: {\r\n        allPlayerNames: this.state.allPlayerNames,\r\n        isPlaying: true,\r\n      },\r\n      channel: this.lobbyChannel,\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this.setState({\r\n      playerName: \"\", // set in modal\r\n      playerId: null, // tba\r\n      isPlaying: false,\r\n      inRoom: false,\r\n      isRoomCreator: false,\r\n      isDisabled: false, // the Create button\r\n      allPlayerNames: [],\r\n      maxPlayers: 20\r\n    });\r\n    this.pubnub.unsubscribeAll();\r\n    this.lobbyChannel = null;\r\n    this.roomId = null;\r\n    this.pubnub.init(this);\r\n  }\r\n\r\n  // Join a room channel\r\n  joinRoom = (value) => {\r\n    this.roomId = value;\r\n    this.lobbyChannel = \"tictactoelobby--\" + this.roomId;\r\n    this.setState({ inRoom: true });\r\n\r\n    // Check the number of people in the channel\r\n    this.pubnub\r\n      .hereNow({\r\n        channels: [this.lobbyChannel],\r\n      })\r\n      .then((response) => {\r\n        if (\r\n          0 < response.totalOccupancy\r\n        ) {\r\n          this.pubnub.subscribe({\r\n            channels: [this.lobbyChannel],\r\n            withPresence: true,\r\n          });\r\n        } else {\r\n          // Game in progress or invalid code\r\n          Swal.close();\r\n          Swal.fire({\r\n            position: \"top\",\r\n            allowOutsideClick: false,\r\n            title: \"Error\",\r\n            text: \"Could not enter room\",\r\n            width: 275,\r\n            padding: \"0.7em\",\r\n            customClass: {\r\n              heightAuto: false,\r\n              title: \"title-class\",\r\n              popup: \"popup-class\",\r\n              confirmButton: \"button-class\",\r\n            },\r\n          });\r\n          this.reset();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  handleOpenRules() {\r\n    Swal.fire({\r\n      font: \"Roboto\",\r\n      position: \"top\",\r\n      title: \"Rules\",\r\n      html:\r\n        \"To start, one person is it, let's say her name is Lucy.\" +\r\n        \"Everyone gets a prompt.                                  \" +\r\n        \"Answer the prompt as if you were Lucy.                    \" +\r\n        \"Once everyone has answered, you'll see everyone's answers.\" +\r\n        \"Click on the one you think is Lucy's.                      \" +\r\n        \"You'll see which one was right.                            \" +\r\n        \"Then it's the next person's turn!                          \",\r\n      showCloseButton: true,\r\n      showConfirmButton: false,      \r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <html>\r\n        <head>\r\n          <title>UVic game</title>\r\n        </head>\r\n        <body>\r\n          <div class=\"heading\">\r\n            <Button\r\n              id=\"rules-button\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={this.handleOpenRules}\r\n            >\r\n              Rules\r\n            </Button>\r\n            <h1>The UVic game!</h1>\r\n          </div>\r\n          {!this.state.inRoom && (\r\n            <div className=\"loginScreen\">\r\n              <div className=\"button-container\">\r\n                <Button\r\n                  id=\"create\"\r\n                  variant=\"contained\"\r\n                  onClick={(e) => this.onPressCreate()}\r\n                >\r\n                  {\" \"}\r\n                  Create a new game\r\n                </Button>\r\n                <Button\r\n                  id=\"join\"\r\n                  variant=\"contained\"\r\n                  onClick={(e) => this.onPressJoin()}\r\n                >\r\n                  {\" \"}\r\n                  Join a game\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.state.isPlaying && this.state.inRoom && (\r\n            <div>\r\n              <p>\r\n                Your Room Id: <span id=\"meetingID\">{this.roomId}</span>\r\n              </p>\r\n              <p>\r\n                Waiting for players... <br />\r\n                <br />\r\n              </p>\r\n              {this.state.isRoomCreator &&(\r\n              <Button\r\n                id=\"start\"\r\n                variant=\"contained\"\r\n                onClick={(e) => this.onPressStart()}>\r\n                Start Game\r\n              </Button>)}\r\n              {this.state.isRoomCreator &&(\r\n                <p>Players: {this.state.allPlayerNames.length}</p>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {this.state.isPlaying && (\r\n            <Game\r\n              pubnub={this.pubnub}\r\n              gameChannel={\"game--\" + this.roomId}\r\n              playerName={this.state.playerName}\r\n              allPlayerNames={this.state.allPlayerNames}\r\n              isRoomCreator={this.state.isRoomCreator}\r\n              endGame={this.endGame}\r\n            />\r\n          )}\r\n        </body>\r\n      </html>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}